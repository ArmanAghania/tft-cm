LeadListView Context:

    # def get_context_data(self, **kwargs):
    #     context = super().get_context_data(**kwargs)
    #     user = self.request.user

    #     base_queryset = Lead.objects.filter(organisation=user.userprofile)
    #     bank_numbers_qs = BankNumbers.objects.filter(organisation=user.userprofile)
    #     sales_qs = Sale.objects.filter(organisation=user.userprofile)

    #     if not user.is_organisor:
    #         base_queryset = base_queryset.filter(agent__user=user)
    #         sales_qs = sales_qs.filter(agent=user.agent)

    #     if user.is_organisor:
    #         context["unassigned_leads"] = base_queryset.filter(agent__isnull=True)
            

    #     # Calculate agent sales data
    #     agent = self.request.user.id
    #     today = date.today()

    #     base_filter_args = {}
    #     if not user.is_organisor:
    #         base_filter_args["lead__agent__user"] = user

        
    #     # total_bank_numbers = BankNumbers.objects.filter(organisation=user.userprofile).count()

    #     # leads_not_in_bank_count = Lead.objects.filter(organisation=user.userprofile).exclude(phone_number__in=BankNumbers.objects.filter(organisation=user.userprofile).values('number')).count()

    #     total_bank_numbers = bank_numbers_qs.count()
    #     leads_not_in_bank_count = base_queryset.exclude(phone_number__in=bank_numbers_qs.values('number')).count()

    #     context["bank_numbers"] = {'bank_total': total_bank_numbers}
    #     context["new_leads"] = {'new_leads_total': leads_not_in_bank_count}

    #     # Add the search form
    #     context["search_form"] = LeadSearchForm(self.request.GET or None)

    #     context["filter_form"] = self.filterset.form

    #    # Calculate agent sales data
    #     agent = self.request.user.id
    #     today = JalaliDate.today()  # Use JalaliDate from persiantools
        
    #     # Calculate the start of the week (Saturday) and month (first day of the month)
    #     # Convert JalaliDate to a Gregorian date
    #     gregorian_today = today.to_gregorian()

    #     # Find out how many days we are away from the last Saturday
    #     days_since_last_saturday = gregorian_today.weekday() + 2  # +1 to shift from Monday-start to Sunday-start, another +1 to make Sunday = 1, Monday = 2, ..., Saturday = 7

    #     # Subtract those days
    #     start_of_week_gregorian = gregorian_today - timedelta(days=days_since_last_saturday % 7)  # % 7 makes sure that if today is Saturday, we subtract 0 days

    #     # Convert back to JalaliDate
    #     start_of_week = JalaliDate(start_of_week_gregorian)
    #     start_of_month = today.replace(day=1)

        # base_filter_args = {}
        # if user.is_organisor:
        #     # Aggregate sales
        #     daily_sales = Sale.objects.filter(organisation=user.userprofile, date__date=today.to_gregorian()).aggregate(Sum('amount'))['amount__sum'] or 0
        #     weekly_sales = Sale.objects.filter(organisation=user.userprofile, date__date__range=(start_of_week.to_gregorian(), today.to_gregorian())).aggregate(Sum('amount'))['amount__sum'] or 0
        #     monthly_sales = Sale.objects.filter(organisation=user.userprofile, date__date__range=(start_of_month.to_gregorian(), today.to_gregorian())).aggregate(Sum('amount'))['amount__sum'] or 0
        #     total_sales = Sale.objects.filter(organisation=user.userprofile).aggregate(Sum('amount'))['amount__sum'] or 0
        # elif user.is_agent:
        #     # Aggregate sales
        #     daily_sales = Sale.objects.filter(organisation=user.agent.organisation, agent=user.agent, date__date=today.to_gregorian()).aggregate(Sum('amount'))['amount__sum'] or 0
        #     weekly_sales = Sale.objects.filter(organisation=user.agent.organisation, agent=user.agent, date__date__range=(start_of_week.to_gregorian(), today.to_gregorian())).aggregate(Sum('amount'))['amount__sum'] or 0
        #     monthly_sales = Sale.objects.filter(organisation=user.agent.organisation, agent=user.agent, date__date__range=(start_of_month.to_gregorian(), today.to_gregorian())).aggregate(Sum('amount'))['amount__sum'] or 0
        #     total_sales = Sale.objects.filter(organisation=user.agent.organisation, agent=user.agent).aggregate(Sum('amount'))['amount__sum'] or 0

        # context["sales_data"] = {
        #     'daily_sales': daily_sales,
        #     'weekly_sales': weekly_sales,
        #     'monthly_sales': monthly_sales,
        #     'total_sales': total_sales,
        # }

        # sales_in_timeframes = sales_qs.annotate(
        #     daily_sales=Sum('amount', filter=Q(date__date=today.to_gregorian())),
        #     weekly_sales=Sum('amount', filter=Q(date__date__range=(start_of_week.to_gregorian(), today.to_gregorian()))),
        #     monthly_sales=Sum('amount', filter=Q(date__date__range=(start_of_month.to_gregorian(), today.to_gregorian()))),
        #     total_sales=Sum('amount')
        # ).first()  # First to get the single result

        # context["sales_data"] = {
        #     'daily_sales': sales_in_timeframes.daily_sales or 0,
        #     'weekly_sales': sales_in_timeframes.weekly_sales or 0,
        #     'monthly_sales': sales_in_timeframes.monthly_sales or 0,
        #     'total_sales': sales_in_timeframes.total_sales or 0,
        # }

        # if user.is_organisor:
        #     # Filter leads for the organisation in the last month
        #     total_leads = Lead.objects.filter(organisation=user.userprofile, date_assigned__date__range=(start_of_month.to_gregorian(), today.to_gregorian())).count()
        #     total_leads_overall = Lead.objects.filter(organisation=user.userprofile).count()

        #     print(total_leads)
        #     # Filter sales made by the organisation in the last month
        #     converted_leads = Sale.objects.filter(organisation=user.userprofile, date__date__range=(start_of_month.to_gregorian(), today.to_gregorian())).values('lead').distinct().count()
        #     converted_leads_overall = Sale.objects.filter(organisation=user.userprofile).values('lead').distinct().count()

        #     print(converted_leads)
        #     if total_leads == 0:
        #         percentage = 0
        #     else:
        #         percentage = (converted_leads / total_leads) * 100

        #     if total_leads_overall == 0:
        #         percentage_overall = 0
        #     else:
        #         percentage_overall = (converted_leads_overall / total_leads_overall) * 100

        #     agents_data = {
        #         'total_leads': total_leads,
        #         'converted_leads': converted_leads,
        #         'percentage': percentage,
        #         'total_leads_overall': total_leads_overall,
        #         'converted_leads_overall': converted_leads_overall,
        #         'percentage_overall': percentage_overall,
        #     }

        # else:
        #     # Filter leads for the agent in the last month
        #     total_leads = Lead.objects.filter(organisation=user.agent.organisation,agent__user=user, date_assigned__date__range=(start_of_month.to_gregorian(), today.to_gregorian())).count()
        #     total_leads_overall = Lead.objects.filter(organisation=user.agent.organisation,agent__user=user).count()

        #     # Filter sales made by the agent in the last month
        #     converted_leads = Sale.objects.filter(organisation=user.agent.organisation,lead__agent__user=user, date__date__range=(start_of_month.to_gregorian(), today.to_gregorian())).values('lead').distinct().count()
        #     converted_leads_overall = Sale.objects.filter(organisation=user.agent.organisation,lead__agent__user=user).values('lead').distinct().count()

        #     if total_leads == 0:
        #         percentage = 0
        #     else:
        #         percentage = (converted_leads / total_leads) * 100

        #     if total_leads_overall == 0:
        #         percentage_overall = 0
        #     else:
        #         percentage_overall = (converted_leads_overall / total_leads_overall) * 100

        #     agents_data = {
        #         'total_leads': total_leads,
        #         'converted_leads': converted_leads,
        #         'percentage': percentage,
        #         'total_leads_overall': total_leads_overall,
        #         'converted_leads_overall': converted_leads_overall,
        #         'percentage_overall': percentage_overall,
        #     }

        # context['agents_data'] = agents_data

        # Calculate lead conversions
        
        # return context



        # @background(schedule=2)
# def notify_background(df=None):
#     asyncio.run(notify_agents_via_telegram(df))

# async def notify_agents_via_telegram(df):
        

#         # Initialize the limiter: 3 messages every 30 seconds
#         limiter = AsyncLimiter(2, 30)
#         data_list = json.loads(df)

#         @sync_to_async
#         def get_organisation_token_by_agent_name(name):
#             user = User.objects.get(alt_name=name)
#             # Assuming each agent belongs to one organisation and each organisation has a UserProfile
#             organisation = user.agent.organisation
#             return organisation.telegram_token

#         @sync_to_async
#         def get_agent_by_alt_name(name):
#             return User.objects.get(alt_name=name)
        
#         @sync_to_async
#         def get_agent_chat_id(user):
#             return user.agent.chat_id
        
        

        
#         for agent_name, phone_data in data_list.items():

#             TOKEN = await get_organisation_token_by_agent_name(agent_name)
#             bot = Bot(TOKEN)

#             if phone_data == {}:
#                 continue
#             else:
#                 user = await get_agent_by_alt_name(agent_name)
#                 today = jdatetime.datetime.now().strftime('%Y/%m/%d')
#                 rank = user.rank
#                 chat_id = await get_agent_chat_id(user)

#                 chat_settings = await load_chat_settings()
#                 if chat_settings.override_chat_id and chat_settings.chat_id:
#                     chat_id = chat_settings.chat_id

#                 if not chat_id:
#                     chat_id = '-1001707390535'

#                 print(chat_id)
#                 if not chat_id:
#                     print(f"No chat_id found for agent: {agent_name}")
#                     continue
                
#                 # Acquire a token. If rate limit is exceeded, this will wait until it's possible to proceed.
#                 await limiter.acquire()

#                 # message = f"Hello, here are your new leads for {agent_name} Rank {rank}:\n\n"
#                 if rank == 1:
#                     message = f'''
#                         🥇
#                         {today} 

#                         {agent_name}
#                         رنک : {rank}
#                         ارجاع : {len(phone_data.values())}\n\n'''
                    
#                     # Iterate over the phone data and add each phone number to the message.
#                     for i, lead_details in enumerate(phone_data.values()):
#                         message += f"{i + 1}. [{lead_details['phone_number']}](tel:{lead_details['phone_number']}) \n"
#                 elif rank == 2:
#                     message = f'''
#                         🥈
#                         {today} 

#                         {agent_name}
#                         رنک : {rank}
#                         ارجاع : {len(phone_data.values())}\n\n'''
                    
#                     # Iterate over the phone data and add each phone number to the message.
#                     for i, lead_details in enumerate(phone_data.values()):
#                         message += f"{i + 1}. [{lead_details['phone_number']}](tel:{lead_details['phone_number']}) \n"
                
#                 elif rank == 3:
#                     message = f'''
#                         🥉
#                         {today} 

#                         {agent_name}
#                         رنک : {rank}
#                         ارجاع : {len(phone_data.values())}\n\n'''
                    
#                     # Iterate over the phone data and add each phone number to the message.
#                     for i, lead_details in enumerate(phone_data.values()):
#                         message += f"{i + 1}. [{lead_details['phone_number']}](tel:{lead_details['phone_number']}) \n"

#                 elif rank == 4:
#                     message = f'''
#                         🏅
#                         {today} 

#                         {agent_name}
#                         رنک : آموزش
#                         ارجاع : {len(phone_data.values())}\n\n'''
                    
#                     # Iterate over the phone data and add each phone number to the message.
#                     for i, lead_details in enumerate(phone_data.values()):
#                         message += f"{i + 1}. [{lead_details['phone_number']}](tel:{lead_details['phone_number']}) \n"

#                 await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')


# class SaleUpdateView(LoginRequiredMixin, generic.UpdateView):
#     template_name = "leads/sales_update.html"
#     form_class = SaleModelForm

#     def get_queryset(self):
#         user = self.request.user
#         # initial queryset of leads for the entire organisation
#         if user.is_organisor:
#             queryset = Sale.objects.filter(organisation=user.userprofile, lead=self.kwargs['pk'])
#         else:
#             queryset = Sale.objects.filter(
#                 lead__organisation=user.agent.organisation
#             )
#             # filter for the agent that is logged in
#             queryset = queryset.filter(lead=self.kwargs['pk'])
#         return queryset
    
#     def get_context_data(self, **kwargs):
#         context = super(SaleUpdateView, self).get_context_data(**kwargs)
#         context.update({"lead": Lead.objects.get(pk=self.kwargs["pk"])})
#         return context

#     def get_success_url(self):
#         return reverse("leads:lead-detail", kwargs={"pk": self.get_object().lead.id})
    
#     def form_valid(self, formset):
#         for form in formset:
#             if form.is_valid() and form.has_changed():
#                 sale = form.save(commit=False)
                
#                 # Assuming that each form in the formset corresponds to a Sale instance
#                 if not sale.lead.agent:
#                     messages.error(self.request, "You cannot update a sale for a lead without an assigned agent.")
#                     return self.form_invalid(formset)
                
#                 user = self.request.user
#                 if user.is_organisor:
#                     sale.organisation = user.userprofile
#                 else:
#                     sale.organisation = sale.lead.organisation
#                 sale.agent = sale.lead.agent

#                 sale.save()
#             elif not form.is_valid():
#                 return self.form_invalid(formset)
        
#         return super(SaleUpdateView, self).form_valid(formset)
    
#     def post(self, request, *args, **kwargs):
#         print("POST data:", request.POST) 
#         SaleFormSet = modelformset_factory(Sale, form=self.form_class, extra=0)
#         formset = SaleFormSet(request.POST)

#         if formset.is_valid():
#             for form in formset:
#                 if form.has_changed():
#                     sale = form.save(commit=False)

#                     # Check if there is an agent assigned to the lead
#                     if not sale.lead.agent:
#                         messages.error(self.request, "You cannot update a sale for a lead without an assigned agent.")
#                         continue  # Skip this form and continue with the next one

#                     user = self.request.user
#                     if user.is_organisor:
#                         sale.organisation = user.userprofile
#                     else:
#                         sale.organisation = sale.lead.organisation
#                     sale.agent = sale.lead.agent

#                     sale.save()

#             return redirect(self.get_success_url())
#         else:
#             return self.form_invalid(formset)

# class DashboardView(generic.TemplateView):
#     template_name = "dashboard.html"

#     def get_context_data(self, **kwargs):
#         context = super().get_context_data(**kwargs)
#         user = self.request.user
#         today_jalali = JalaliDate.today()
#         today_gregorian = today_jalali.to_gregorian()
#         start_of_week = self.get_start_of_week(today_gregorian)
#         start_of_month = today_jalali.replace(day=1).to_gregorian()

#         context['total_lead_count'] = self.get_total_lead_count(user)
#         context['total_in_past30'] = self.get_leads_in_past_days(user, 30)
#         context['converted_in_past30'] = self.get_converted_leads_in_past_days(user, 30)

#         context['sales_data'] = self.get_sales_data(user, today_gregorian, start_of_week, start_of_month)

#         context['agents_data'] = self.get_agents_data(user, start_of_month, today_gregorian)
#         context['top_agents'] = self.get_top_agents(user, start_of_month, today_gregorian)

#         return context

#     def get_start_of_week(self, date):
#         return date - timedelta(days=(date.weekday() + 2) % 7)

#     def get_total_lead_count(self, user):
#         return Lead.objects.filter(organisation=user.userprofile).count()

#     def get_leads_in_past_days(self, user, days):
#         past_date = now() - timedelta(days=days)
#         return Lead.objects.filter(organisation=user.userprofile, date_added__gte=past_date).count()

#     def get_converted_leads_in_past_days(self, user, days):
#         converted_category = Category.objects.get(name="Converted")
#         past_date = now() - timedelta(days=days)
#         return Lead.objects.filter(organisation=user.userprofile, category=converted_category, converted_date__gte=past_date).count()

#     def get_sales_data(self, user, today, start_of_week, start_of_month):
#         if user.is_organisor:
#             organisation = user.userprofile
#         else:
#             organisation = user.agent.organisation

#         daily_sales = Sale.objects.filter(organisation=organisation, date__date=today).aggregate(Sum('amount'))['amount__sum'] or 0
#         weekly_sales = Sale.objects.filter(organisation=organisation, date__date__range=(start_of_week, today)).aggregate(Sum('amount'))['amount__sum'] or 0
#         monthly_sales = Sale.objects.filter(organisation=organisation, date__date__range=(start_of_month, today)).aggregate(Sum('amount'))['amount__sum'] or 0
#         total_sales = Sale.objects.filter(organisation=organisation).aggregate(Sum('amount'))['amount__sum'] or 0

#         return {'daily_sales': daily_sales, 'weekly_sales': weekly_sales, 'monthly_sales': monthly_sales, 'total_sales': total_sales}

#     def get_agents_data(self, user, start_of_month, today):
#         if user.is_organisor:
#             organisation = user.userprofile
#         else:
#             organisation = user.agent.organisation
#         total_leads = Lead.objects.filter(organisation=organisation, date_assigned__date__range=(start_of_month, today)).count()
#         converted_leads = Sale.objects.filter(organisation=organisation, date__date__range=(start_of_month, today)).values('lead').distinct().count()

#         return self.calculate_conversion_data(total_leads, converted_leads)

#     def get_top_agents(self, user, start_of_month, today):
#         if user.is_organisor:
#             organisation = user.userprofile
#         else:
#             return []  # Agents don't see top agents data

#         return Agent.objects.filter(organisation=organisation).annotate(total_sales=Sum('sale__amount', filter=Q(sale__date__date__range=(start_of_month, today)))).order_by('-total_sales')[:5]

#     def calculate_conversion_data(self, total_leads, converted_leads):
#         if total_leads == 0:
#             percentage = 0
#         else:
#             percentage = (converted_leads / total_leads) * 100

#         return {'total_leads': total_leads, 'converted_leads': converted_leads, 'percentage': percentage}